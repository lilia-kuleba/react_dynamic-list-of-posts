{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/post.ts","index.tsx"],"names":["PostsList","posts","loadPost","selectedPostId","className","map","post","userId","title","onClick","id","type","BASE_URL","NewCommentForm","postId","useState","name","setName","email","setEmail","body","setBody","useEffect","onSubmit","event","comment","preventDefault","fetch","method","headers","JSON","stringify","then","response","json","value","onChange","target","placeholder","required","PostDetails","comments","setComments","isHidden","setIsHidden","foundComments","length","App","initialPost","setPosts","setPost","loadPosts","getPosts","loadedPosts","htmlFor","getPostById","loadedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.453906ae.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  loadPost: (id: number) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, loadPost, selectedPostId = 0 }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          <button\n            onClick={() => loadPost(post.id)}\n            type=\"button\"\n            className=\"PostsList__button button\"\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\ntype Props = {\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const submitForm: React.FormEventHandler = (event) => {\n    event.preventDefault();\n    addComment({\n      name,\n      email,\n      body,\n      postId,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  useEffect(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n  }, [postId]);\n\n  return (\n    <form\n      onSubmit={submitForm}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          onChange={event => setName(event.target.value)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          onChange={event => setBody(event.target.value)}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport function getComments(postId: number) {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json())\n    .then(comments => comments);\n}\n\nexport function deleteComment(id: number) {\n  return fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  })\n    .then(response => response.json());\n}\n\nexport function addComment(comment: Partial<PostComment>) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  })\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getComments, deleteComment } from '../../api/comments';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<PostComment[]>([]);\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n\n  useEffect(() => {\n    getComments(post.id).then(foundComments => setComments(foundComments));\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          onClick={() => setIsHidden(!isHidden)}\n          type=\"button\"\n          className=\"button\"\n        >\n          {`Hide ${comments.length} comments`}\n        </button>\n        {isHidden && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  onClick={() => deleteComment(comment.id)}\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={post.id} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getPostById } from './api/post';\n\nconst App: React.FC = () => {\n  const initialPost = {\n    id: 0,\n    title: '',\n    userId: 0,\n    body: '',\n  };\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [post, setPost] = useState<Post>(initialPost);\n\n  const loadPosts = (userId: number) => {\n    getPosts(userId).then(loadedPosts => setPosts(loadedPosts));\n  };\n\n  const loadPost = (id: number) => {\n    if (post?.id !== id) {\n      getPostById(id).then(loadedPost => setPost(loadedPost));\n    } else {\n      setPost(initialPost);\n    }\n  };\n\n  useEffect(() => {\n    loadPosts(0);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            name=\"select\"\n            onChange={event => loadPosts(+event.target.value)}\n            className=\"App__user-selector\"\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            loadPost={loadPost}\n            selectedPostId={post.id}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {post.id ? <PostDetails post={post} /> : 'No selected post'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport function getPosts(userId: number): Promise<Post[]> {\n  return fetch(`${BASE_URL}/posts${userId ? `?userId=${userId}` : ''}`)\n    .then(response => response.json())\n    .then(posts => posts);\n}\n\nexport function getPostById(id: number): Promise<Post> {\n  return fetch(`${BASE_URL}/posts/${id}`)\n    .then(response => response.json())\n    .then(post => post);\n}\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}